/****************************************************************
 * Stefan-Dobrin Cosmin
 * 342C4
 * Aplicatii Integrate pentru Intreprinderi 
 * Tema 2
 ****************************************************************/
 
 Detalii Proiect:
 	* proiectul a fost implementat folosind tehnologiile Java
 	* compilarea si rularea s-a facut folosind Eclipse 3.5 cu Java 1.6 si baze de date MySQL
 	* dezvoltarea interfetei grafice s-a realizat cu ajutorul Window Builder
 	* dezvoltarea s-a realizat pe sistemul de operare Ubuntu 11.04
 	* tema 2 s-a realizat pornind de la infrastructura realizata pentru tema 1
 	* tema 2 contine 4 proiecte Eclipse:
 		o Tema 2 - Client -> implementarea interfetei client pentru cele 3 tipuri de utilizatori; folosita pentru testare
 		o Tema 2 - Commons -> definitiile celor 2 interfete pentru server si definitiile claselor comune utilizate in restul aplicatiei. Se foloseste pentru a genera tema2_commons.jar, ce trebuie inclus in build-path-ul proiectului
 		o Tema 2 - Server Arhiva -> implementarea pentru serverul remote Arhiva
 		o Tema 2 - Server Registru -> implementarea pentru serverul remote RegistruActivitatiDidactice
 Alte mentiuni:
 	* asa cum s-a specificat pe forum si in cerinta, nu am realizat implementarea pentru nici o functie a administratorului, pentru setari personale sau pentru interactiunea (vizualizare/salvare) contract de studii. Acestea se considera deja salvate.
 	* baza de date a fost populata cu utilizatori cu CNP-uri invalide (si e dezactivata momentan verificarea pentru lungime CNP) pentru a usura si accelera testarea.
 	* in interfata grafica sunt folosite numai apeluri catre cele 2 server prin RMI. Toate interactiunile cu baza de date sunt implementate in acestea.
 	* pentru o rulare corespunzatoare:
 		o se executa scriptul pornireregistrudenume.sh
 		o se pornesc cele doua servere: Server Arhiva si Server Registru
 		o se porneste clientul
 	* in fiecare dintre folderele de proiect sa gaseste un fisier policy, in care e specificata politica pentru acel proiect Java
 	* configuratia de rulare pentru eclipse:
 		o pentru servere si client, VM Arguments:
 			-Djava.rmi.server.codebase=file:./-
			-Djava.security.policy=policy
	* in toate proiectele Server + Client, trebuie adaugat in buildPath-ul din Eclipse fisierul 'Tema 2 - Commons/tema2_commons.jar' . Acesta este generat prin Export din Proiectul 'Tema 2 - Commons'. In arhiva cu tema trimisa, acesta este momentan genrat in folderul specificat 'Tema 2 - Commons/'.
	* utilizatori cu care se poate face testarea (cnp/parola):
		o 111/111 - super-admin
		o 222/222 - sef catedra
		o 333/333 - secretar
		o 444/444 - student 
		o 555/555 - cadru didactic
 	
Detalii implementare:
 	* aplicatia este impartita in 7 pachete:
 		o aii - contine clasele container pentru diversele tipuri de obiecte (utilizatori, discipline, examene, etc)
 		o aii.database - contine clasa de acces la baza de date (DatabaseConnector), clasa wrapper peste obiecte pentru scriere/citire/stergere/actualizare din/in baza de date (ObjectWrapper) si particularizari ale acesteia pentru tipurile de obiect folosite
 		o aii.gui.frames - contine cele 5 frame-uri folosite in aplicatie: Autentificare, Administrator, Student, Cadru Didactic si Secretar
 		o aii.gui.panels - contine implementarile panel-urilor folosite in aplicatie
 		o aii.gui.tools - clase ajutatoare pentru GUI
 		o aii.arhiva - clase pentru componenta server Arhiva
 		o aii.rad - clase pentru componenta server RegistruActivitatiDidactice
 	* in baza de date, am folosit modelul bazelor dat in enuntul problemelor, cu spargerea tabelei orar in 2 sectiuni:
 		o activitate - pentru asocierea 'cadru didactic'-'disciplina'-'tip activitate' 
		o orar - pentru restul informatiilor particularizate - asocierea activitate - grupa - sala - ora
	* mergand pe modelul de la tema 1, am folosit clase Wrapper (de tipul ObjectWrapper) pentru o interfatare mai usoara intre baza de date si obiecte. Fata de tema 1 am facut modificarile necesare pentru a imparti adecvat accesul componenentelor server pe tabelele corespunzatoare.
	* intrucat activitate si orar (in cazul implementarii mele) formeaza tabela orar (asa cum este in enunt), ambele tabele le-am facut accesibile doar din componenta RegistruActivitatiDidactice.
	* pentru comunicarea inter componente server, fiecare dintre acestea are o proprietate Arhiva, respectiv RegistruActivitatiDidactice. Initial acestea sunt null, insa in momentul in care se doreste folosirea lor, daca nu au fost initializare deja, se initializeaza. In felul acesta am reusit sa evit problemele care apareau daca initializarea se facea la inceput, probleme ce apareau de la faptul ca celalalt server nu era inca pornit.
	* pentru accesul la BD, in fiecare componenta server am initializat obiectele de tip Wrapper, pentru obiecte asociate, o singura data, la pornirea serverului, dupa care acestea raman initializate si pot fi folosit in orice moment.
	* pentru verificarile de consistenta ce cer accesul la celelalte tabele, am realizat diverse metode helper:
		- cadruPentruDisciplina - verifica daca un cadru didactic preda cursul la o disciplina - pentru catalog
		- obtineDisciplineUrmate - intoarce o lista cu codurile disciplinelor urmate de un student intr-un an de studiu/semestru - pentru orar/examene
		- etc
	* obtineSituatieScolara, din ArhivaServer am implementat-o cat mai general, in sensul ca obtine situatia scolara pe un an de studiu dat (daca anStudiu>0) sau pe toti anii (daca anStudiu=0). In client, momentan este folosita doar versiunea pentru anul de studiu curent, pentru care sunt calculare inclusiv mediile aritmetice pe fiecare semestru.
	
	
Modificari mesaje:
	-solicitare_situatie scolara (Student -> Arhiva): Am adaugat si anul de studiu pentru care se cere: solicitare_situatie_scolara#cnp_student#an_studiu
	-raspuns_situatie_scolara: Am adaugat mai multe campuri cu mai multe informatii: "medieGenerala", "medieAritmetica", "puncteCredit", "restante", "medieSemestrul1", "medieSemestrul2"
	-solicitare_orar: Am adaugat si semestrul pentru ca este posibil ca un student aflat, sa zicem, la finalul semestrului 1, sa vrea sa afle care este orarul pentru semestrul 2, pentru a, de exemplu, planifica ceva cu cateva luni in avans. Nou format: solicitare_orar#CNP#semestru
	-raspuns_solicitare_calendar_examene: Adaugat si campul pentru grupa, la final. Disciplina este reprezentata doar prin codul acesteia.


Detalii bonus:
	* am implementat bonusul pentru dezvoltarea unei interfete grafice, toate facilitatile componentelor server cerute fiind testate.
	* pentru a implementa interfata grafica, in componentele server sunt implementate multe alte metode (fata de cele din cerinta) folosite pentru afisarea informatiile si pentru un feedback vizual cat mai bun.
	* pentru vizualizarea notelor, am realizat o afisare pentru toate disciplinele din sistem, intorcandu-se doar notele pe care le are studentul. In acest fel am vrut sa testez si intoarcerea -1 pentru lipsa unor note 
	* toate metodele din Arhiva si din RegistruActivitatiDidactice, ca de altfel majoritatea metodelor din toate proiectele, sunt bine documentate si au asociata inclusiv documentatie JavaDoc, ce poate fi generata folosind utilitarul javadoc
	
